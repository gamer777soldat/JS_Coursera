/**
 * @param {Array} collection
 * @params {Function[]} – Функции для запроса
 * @returns {Array}
 */
//(не работает)
function query(collection) {
    var friends = deepCopy(collection);
    let actions = [].slice.call(arguments).slice(1);
    actions.sort(function (a, b) {
        return a[0] === "f" ? -1 : 1;
    });
    //console.log(actions)
    actions.forEach(function (action) {
        actionName = action[0];
        switch (actionName) {
            case "f":
                let property = action[1];
                //console.log(property)
                let values = action[2];
                //console.log(values)
                friends = friends.filter(function (element) {
                    //console.log('element' + element[property]);
                    if (element[property] === undefined) {
                        return false;
                    }
                    else if (typeof values === "object") {

                        if (values.includes(element[property])) {
                            return true;
                        }
                    } else if (typeof values !== "object") {
                        if (values === element[property]) {
                            return true;
                        }
                    } else {

                        return false;
                    }
                });
                //console.log(friends)


                break;
            //Работает
            case "s":
                arrOfFields = action[1];
                friends.forEach(function (item) {
                    let keys = Object.keys(item);
                    keys.forEach(function (key) {
                        if (!arrOfFields.includes(key)) {
                            delete item[key];
                        }
                    })
                });
                break;
        }
    });
    //console.log(friends)
    return friends;
}

/**
 * @params {String[]}
 */
//(работает)
function select() {
    let fields = Array.from(arguments);
    return ["s", fields];
}

/**
 * @param {String} property – Свойство для фильтрации
 * @param {Array} values – Массив разрешённых значений
 */
//(работает)
function filterIn(property, values) {
    return ["f", property, values];
}

//Глубокое копирование обьекта(работает)
function deepCopy(collections) {
    let copy = [];

    collections.forEach(function (item) {
        let copyItem = {};
        let keys = Object.keys(item);

        keys.forEach(function (key) {
            copyItem[key] = item[key];
        });
        copy.push(copyItem);
    });
    return copy;
}

module.exports = {
    query: query,
    select: select,
    filterIn: filterIn
};
